{
    "input": {
        // How many files specified in the manifest below to add to the build.
        // Zero means that all files will be added.  If greater than zero,
        // running with this configuration file multiple times will continue
        // insertion from each previous run.
        //
        // This may be used to check the progress of the build without
        // requiring configuration changes for each run.
        "run": 0,

        // Number of worker threads for simultaneous point insertion.
        "threads": 12,

        // Set to true if the headers for all files are known to be accurate.
        // If accurate, this information can be used to greatly speed up
        // parallelized builds.
        "trustHeaders": true,

        // Input file list.
        "manifest": [
            // Globbed path.
            "/Users/my-name/data/data-directory/*",

            // Absolute filesystem path (tilde expansion supported on unix).
            "/Users/my-name/data/path.laz",

            // Relative filesystem path.
            "../data/country/place.bpf",

            // Explicitly specified filesystem path.
            "fs:///var/data/lidar/something.las",

            // S3 bucket paths (do not include a bucket location).
            "s3://my-bucket/iowa/johnson-county.sbet"
        ]

        // If the manifest is a single specification, it can be a string
        // instead of an array:
        //
        // "manifest": "/Users/my-name/data/data-directory/*"
        //      or
        // "manifest": "../data/country/place.bpf"
        //      etc.
    },
    "output": {
        // Final output location.
        "path": "./usa/il/chicago/index",

        // Path for temporary storage used by entwine.  Must be a local
        // filesystem path.
        "tmp":  "/tmp",

        // True to compress output (lzma).
        "compress": true
    },
    "structure": {
        // A hint as to the total number of points that the resulting index
        // will contain.  A value that is accurate within approximately a
        // factor four can greatly speed up indexing time without increasing
        // run-time resources.
        "numPointsHint": 160000000000,

        // Starting depth level of the base of the tree.
        "nullDepth": 6,

        // End depth level of pre-allocated base chunk.
        "baseDepth": 10,

        // End depth level of on-demand-allocated data chunks.  Omit this field
        // for lossless builds.
        // "coldDepth": 20,

        // Number of points per chunk for the tree depths from baseDepth up to,
        // but not including, coldDepth.
        //
        // Must be a power of 4 for a quadtree or a hybrid build, or a power of
        // 8 for an octree build.
        "pointsPerChunk": 262144,

        // Highly recommended for medium to large (greater than a few billion
        // points) sets, and in general for lossless builds.
        "dynamicChunks": true,

        // If true, points with XYZ coordinates that compare as binary-equal to
        // a previously inserted point will be discarded.  Discarded points
        // will be counted as overflows.
        "discardDuplicates": false,

        // Prefix chunk IDs with 4 base-32 encoded characters.  Useful for
        // S3 sharding performance.
        "prefixIds": false,

        // TODO Unlikely that this works for quadtree, and might also fail for
        // octree.  Hybrid is the default.
        // Valid values are "hybrid", "quadtree", and "octree".
        "type": "hybrid"
    },
    "geometry": {
        // Bounding box for the entire dataset.  Points outside this box will
        // be discarded from the resulting index.  If omitted, the bounds will
        // be inferred from the files in the manifest.
        //
        // Format:
        //      [ x-min, y-min, x-max, y-max] for quadtree.
        //      [ x-min, y-min, z-min, x-max, y-max, z-max] for octree.
        "bbox": [
            -10796577.371225, 4902908.135781, 0,
            -10015953.953824, 5375808.896799, 1000
        ],

        // If reprojection is required, specify in/out spatial reference
        // systems here.  "reproject.in" may be omitted if all source files
        // contain their native SRSes in their headers.
        //
        // The SRS from "in" will only be used for any files that do not
        // contain SRS information in their headers, so it is only a default.
        //
        // If reprojection is specified, then the "bbox" field above should be
        // in the same coordinate system as "out" specified here.
        "reproject": {
            "in": "EPSG:26915",
            "out": "EPSG:3857"
        },

        /*
        "reproject": null,  // Don't reproject data.
        */

        // Specify dimensions to capture in the resulting index.  If the type
        // and size are not sufficiently large to store a dimension in any file,
        // that file will be only partially inserted.
        "schema": [
            { "name": "X",          "type": "floating", "size": 8 },
            { "name": "Y",          "type": "floating", "size": 8 },
            { "name": "Z",          "type": "floating", "size": 8 },

            { "name": "Intensity",  "type": "unsigned", "size": 2 },

            { "name": "Red",        "type": "unsigned", "size": 2 },
            { "name": "Green",      "type": "unsigned", "size": 2 },
            { "name": "Blue",       "type": "unsigned", "size": 2 },

            // This is an Entwine-specific dimension used to track which points
            // come from which file in the manifest.  The size may be specified
            // as small as necessary if the number of input files are known
            // (Origin IDs are assigned in ascending order starting with zero).
            //
            // Omitting this dimension will disable Origin tracking in the
            // output, so that individual input files will not reconstructible
            // from the index.
            { "name": "Origin",     "type": "unsigned", "size": 4 }
        ]
    }
}

